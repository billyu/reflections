What happens when you initialize a repository? Why do you need to do it?
    It will creat a hidden directory called ".git" to store all of the meta data and version history.
How is the staging area different from the working directory and the repository? What value do you think it offers?
    The staging area is a transit space for us to prepare files to be commited to repository. It is useful when we are going to commit multiple files in a single commit.
How can you use the staging area to make sure you have one commit per logical change?
    Before committing to the repository, check if the staging area contains the files are related in one logical change. If not, we need to seperate them into 2 or combine more files to 1 commit.
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
    The situations might include trying out new tools, adding drastically different functions, refactoring, or testing out coworker's idea. 
    Branches can keep all of those changes organized rather than chaos.
How do the diagrams help you visualize the branch structure?
    We easily identify each commit's parent and children. That is super important because we can track the changes visually.
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
    We combine the changes made from the two branches. 
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
    Pros: We are able to learn the differences between branches by paying attention to every conflicts.
    Cons: It is more time consuming.

